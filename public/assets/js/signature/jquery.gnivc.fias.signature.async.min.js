function Gnivc_Fias_Signature_Async_FillCertList(e, r) {
    cadesplugin.async_spawn((function*() {
        var i = null
          , t = 0
          , a = null
          , n = null
          , l = null
          , s = null
          , o = 0
          , d = 0
          , c = [];
        try {
            if (e.empty(),
            s = "Ошибка при открытии хранилища: ",
            !(i = yield cadesplugin.CreateObjectAsync("CAdESCOM.Store")))
                throw "Объект или свойство не найдено. (0x80092004)";
            if (yield i.Open(),
            s = "Ошибка при получении коллекции сертификатов: ",
            !(a = yield i.Certificates))
                throw "Объект или свойство не найдено. (0x80092004)";
            if (s = "Ошибка при определении количества сертификатов: ",
            null === (t = yield a.Count))
                throw "Объект или свойство не найдено. (0x80092004)";
            if (0 === t)
                throw "Сертификаты не найдены в системе";
            o = 10,
            $.Gnivc.Fias.Signature.ShowProgressBar("Загрузка списка ваших сертификатов", o),
            d = 90 / t;
            for (var u = 1; u <= t; u++) {
                s = "Ошибка при перечислении сертификатов: ",
                n = yield a.Item(u),
                s = "Ошибка при получении свойств сертификата: ";
                var S = yield(yield n.PublicKey()).Algorithm;
                l = new $.Gnivc.Fias.Certificate({
                    Thumbprint: yield n.Thumbprint,
                    ValidFromDate: yield n.ValidFromDate,
                    ValidToDate: yield n.ValidToDate,
                    SubjectName: yield n.SubjectName,
                    IssuerName: yield n.IssuerName,
                    HasPrivateKey: yield n.HasPrivateKey(),
                    PublicKey_Algorithm_FriendlyName: yield S.FriendlyName,
                    PublicKey_Algorithm_OID: yield S.Value,
                    Base64String: yield n.Export(cadesplugin.CADESCOM_ENCODE_BASE64)
                }),
                c.push(l);
                var C = $("<li></li>").data("cert-thumbprint", l.Thumbprint()).data("cert-body", l.Base64String()).data("cert-public-algorithm", l.GetPubKeyAlgorithmOID()).html("<div class='cert-name'>" + l.GetCertName() + "</div> <div class='cert-publisher'>Поставщик: " + l.GetIssuer() + "</div> <div class='cert-date-end'>Действителен до: " + l.GetCertTillDate() + "</div>").addClass("cert-item");
                l.IsValid(C) ? e.prepend(C) : e.append(C),
                o += d,
                $.Gnivc.Fias.Signature.ShowProgressBar("Загрузка списка ваших сертификатов", o)
            }
            yield i.Close(),
            $.Gnivc.Fias.Signature.HideProgressBar(),
            r(c, null)
        } catch (e) {
            i && (yield i.Close()),
            $.Gnivc.Fias.Signature.ShowError(s + $.Gnivc.Fias.Signature.GetErrorMessage(e)),
            r(c, s + $.Gnivc.Fias.Signature.GetErrorMessage(e))
        }
    }
    ))
}
function Gnivc_Fias_Signature_Async_CAdESCOMAbout(e) {
    cadesplugin.async_spawn((function*() {
        var r, i = {
            Version_CryptoPlugin: null,
            Prov_75: null,
            Prov_80: null,
            Prov_81: null,
            Version_CryptoPlugin_Error: null,
            Prov_75_Error: null,
            Prov_80_Error: null,
            Prov_81_Error: null
        };
        try {
            var t, a;
            r = "Version_CryptoPlugin_Error";
            var n = yield cadesplugin.CreateObjectAsync("CAdESCOM.About");
            ((t = yield n.PluginVersion) || (t = yield n.Version)) && (i.Version_CryptoPlugin = yield t.toString()),
            r = "Prov_75_Error",
            t = yield n.CSPVersion("", 75),
            a = yield n.CSPName(75),
            i.Prov_75 = (yield a) + " " + (yield t.toString()),
            r = "Prov_80_Error",
            t = yield n.CSPVersion("", 80),
            a = yield n.CSPName(80),
            i.Prov_80 = (yield a) + " " + (yield t.toString()),
            r = "Prov_81_Error",
            t = yield n.CSPVersion("", 81),
            a = yield n.CSPName(81),
            i.Prov_81 = (yield a) + " " + (yield t.toString())
        } catch (e) {
            i[r] = e.message
        }
        e(i)
    }
    ))
}
function Gnivc_Fias_Signature_Async_SignHash(e, r, i, t) {
    cadesplugin.async_spawn((function*(a) {
        var n = i
          , l = e
          , s = r
          , o = null
          , d = null
          , c = null
          , u = null
          , S = null;
        if (null !== l && 0 !== l.length)
            if (null !== s && 0 !== s.length)
                if (null !== n && 0 !== n.length) {
                    try {
                        d = yield cadesplugin.CreateObjectAsync("CAdESCOM.Store")
                    } catch (e) {
                        return void $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.Store: " + $.Gnivc.Fias.Signature.GetErrorMessage(e))
                    }
                    if (d) {
                        try {
                            yield d.Open()
                        } catch (e) {
                            return void $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to open CAdESCOM.Store: " + $.Gnivc.Fias.Signature.GetErrorMessage(e))
                        }
                        var C = yield d.Certificates
                          , g = yield C.Find(cadesplugin.CAPICOM_CERTIFICATE_FIND_SHA1_HASH, l);
                        if (0 !== (yield g.Count)) {
                            try {
                                o = yield cadesplugin.CreateObjectAsync("CAdESCOM.HashedData")
                            } catch (e) {
                                return void $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.HashedData: " + $.Gnivc.Fias.Signature.GetErrorMessage(e))
                            }
                            if (o) {
                                switch (s) {
                                case "1.2.643.7.1.1.1.1":
                                    yield o.propset_Algorithm(cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256);
                                    break;
                                case "1.2.643.7.1.1.1.2":
                                    yield o.propset_Algorithm(cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512);
                                    break;
                                default:
                                    yield o.propset_Algorithm(cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411)
                                }
                                yield o.SetHashValue(n);
                                try {
                                    c = yield cadesplugin.CreateObjectAsync("CAdESCOM.CPSigner")
                                } catch (e) {
                                    return void $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.CPSigner: " + $.Gnivc.Fias.Signature.GetErrorMessage(e))
                                }
                                if (c) {
                                    try {
                                        oSigningTimeAttr = yield cadesplugin.CreateObjectAsync("CAdESCOM.CPAttribute")
                                    } catch (e) {
                                        return void $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.CPAttribute: " + $.Gnivc.Fias.Signature.GetErrorMessage(e))
                                    }
                                    if (oSigningTimeAttr) {
                                        try {
                                            oDocumentNameAttr = yield cadesplugin.CreateObjectAsync("CAdESCOM.CPAttribute")
                                        } catch (e) {
                                            return void $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.CPAttribute: " + $.Gnivc.Fias.Signature.GetErrorMessage(e))
                                        }
                                        if (oDocumentNameAttr) {
                                            try {
                                                S = yield cadesplugin.CreateObjectAsync("CAdESCOM.CadesSignedData")
                                            } catch (e) {
                                                return void $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.CadesSignedData: " + $.Gnivc.Fias.Signature.GetErrorMessage(e))
                                            }
                                            if (S)
                                                try {
                                                    var y = yield g.Item(1);
                                                    yield c.propset_Certificate(y),
                                                    "undefined" != typeof setDisplayData && (yield S.propset_DisplayData(1));
                                                    try {
                                                        u = yield S.SignHash(o, c, cadesplugin.CADESCOM_CADES_BES)
                                                    } catch (e) {
                                                        return void $.Gnivc.Fias.Signature.ShowError("Не удалось создать подпись из-за ошибки: " + $.Gnivc.Fias.Signature.GetErrorMessage(e))
                                                    }
                                                    t(r, u)
                                                } catch (e) {
                                                    $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи: " + $.Gnivc.Fias.Signature.GetErrorMessage(e))
                                                }
                                            else
                                                $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.CadesSignedData. NULL")
                                        } else
                                            $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.CPAttribute. NULL")
                                    } else
                                        $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.CPAttribute. NULL")
                                } else
                                    $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.CPSigner. NULL")
                            } else
                                $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.HashedData. NULL")
                        } else
                            $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Сертификат не найден в хранилище")
                    } else
                        $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Failed to create CAdESCOM.Store. NULL")
                } else
                    $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Хеш-значение не передано");
            else
                $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Алгоритм сертификата не указан");
        else
            $.Gnivc.Fias.Signature.ShowError("Ошибка при создании подписи - Сертификат не выбран")
    }
    ))
}
